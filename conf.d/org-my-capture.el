(when (or
       ;; peccu-p
       win-env-p
       wsl-p
       )
  (require-with-install 'org)
  ;; generated by ChatGPT
  ;; https://chatgpt.com/share/0ca4b7b0-ecc6-41c3-9454-9588aefba8e4

  (defun my/copy-latest-file-and-insert-org-link (source-dir target-dir)
    "Copy the latest file from SOURCE-DIR to a subdirectory of TARGET-DIR based on the current date,
and insert the org-mode image link at point."
    (interactive "DSource directory: \nDTarget directory: ")
    (let* ((files (directory-files source-dir t "^[^.].*"))
           (latest-file (car (sort files (lambda (a b) (time-less-p (nth 5 (file-attributes b))
                                                                    (nth 5 (file-attributes a)))))))
           (file-name (file-name-nondirectory latest-file))
           (current-year (format-time-string "%Y"))
           (current-month (format-time-string "%m"))
           (target-subdir (expand-file-name (concat current-year "/" current-month) target-dir))
           (target-path (expand-file-name file-name target-subdir)))
      (unless (file-directory-p target-subdir)
        (make-directory target-subdir t))
      (copy-file latest-file target-path t)
      (insert (format "[[file:%s]]" target-path))))

  (defun my/insert-image-like-logsec ()
    (interactive)
    (my/copy-latest-file-and-insert-org-link "~/Work/ScreenCapture" "~/Documents/LogSeq/assets/"))

  (global-set-key (kbd "M-V") 'my/insert-image-like-logsec)

  ;; you can show image inline in org-mode
  ;; (add-hook 'org-mode-hook 'org-display-inline-images)
  ;; M-x org-toggle-inline-images (C-c C-x C-v)
  ;; M-x org-display-inline-images
  ;; M-x org-remove-inline-images
  )

(when (or
       peccu-p
       ;; win-env-p
       ;; wsl-p
       )
  (when (version<= "29" emacs-version)
    ;; generated by ChatGPT
    ;; https://chatgpt.com/share/68591f0c-7468-8008-be49-3095d6caddf3
    (defun my/insert-image-target-dir ()
      "Returns the path for target directory like `./2025images/06/23/'"
      (let* (
             (current-year (format-time-string "%Y"))
             (current-month (format-time-string "%m"))
             (current-day (format-time-string "%d"))
             (dir (or (bound-and-true-p org-download-image-dir) (concat "./" current-year "images/" current-month "/" current-day "/")))
             )
        dir))
    ;; (my/insert-image-target-dir)

    (defun my/yank-org-mode-image-handler (type data)
      "Handle TYPE (like 'image/png) and insert org-mode formatted link."
      (let* ((ext (pcase type
                    ('image/png ".png")
                    ('image/jpeg ".jpg")
                    ('image/svg+xml ".svg")
                    (_ ".img")))
             (filename (format-time-string "screenshot_%Y%m%d_%H%M%S"))
             (dir (my/insert-image-target-dir))
             (filepath (expand-file-name (concat filename ext) dir)))
        (unless (file-exists-p dir)
          (make-directory dir t))
        (with-temp-file filepath
          (insert data))
        (insert (format "[[file:%s]]" (file-relative-name filepath (file-name-directory (buffer-file-name)))))
        ;; show after insert
        (org-display-inline-images)))

    (with-eval-after-load 'org
      (message "org loaded, setting hook and key from my-capture")
      (define-key org-mode-map (kbd "M-V") #'yank-media)

      (add-hook 'org-mode-hook
                (lambda ()
                  (message "org-mode-hook running from my-capture")
                  (yank-media-handler "image/.*" #'my/yank-org-mode-image-handler))))

    ))
